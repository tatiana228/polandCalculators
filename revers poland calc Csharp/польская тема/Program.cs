class RPN
{
    
        //Метод Calculate принимает выражение в виде строки и возвращает результат, в своей работе использует другие методы класса
    static public double Calculate(string input)
    {
       
        string output = GetExpression(input);                                         //Преобразовываем выражение в постфиксную запись
        double result = Counting(output);                                               //Решаем полученное выражение
        return result;                                                                  //Возвращаем результат
    }

    //Метод, преобразующий входную строку с выражением в постфиксную запись
    static private string GetExpression(string input)
    {
        string output = string.Empty; //Строка для хранения выражения
                                                                                        //cтринг емпти пустая строка для чтения аналог "", но тут мы используем ее как
                                                                                         //вход строковой переменной или чето типо того надо разобраться
        Stack<char> operStack = new Stack<char>();   //Стек для хранения операторов
        //                                                                              стек это типо как стопка книг что последнее приходит - то первое и выходит

        for (int i = 0; i < input.Length; i++) //Для каждого символа в входной строке
        {
            //пропуск разделителя пробел равно и тп
            if (IsDelimeter(input[i]))
                continue; //идем к некст символу

                                                                                                        // Если текущий символ - число, добавляем его к результирующей строке
                                                                                                        //если цифра- читает все число
            if (Char.IsDigit(input[i])) //Если цифра
            {
                                                                                                        //число распознается пока не встретит оператор(знак) или разделитель
                while (!IsDelimeter(input[i]) && !IsOperator(input[i]))
                {
                    output += input[i]; //добавляем число к строке
                    i++; //переход к некст символу

                    if (i == input.Length) break; //Если символ - последний, то выходим из цикла
                }

                output += " "; //Дописываем после числа пробел в строку с выражением
                i--; //Возвращаемся на один символ назад, к символу перед разделителем
            }

            //Если символ - оператор
            if (IsOperator(input[i])) //Если оператор
                                      //----КАК ДОЛЖНО РАБОТАТЬ-----------------//
                                      // Если это не первая операция в выражении,
                                      // то нам необходимо будет сравнить ее
                                      // с последней операцией, хранящейся в стеке.
                                      //если это первая операция), кладем ее в стек,
                                      // и переходим к следующему символу
                                      // Если приоритет текущей операции больше приоритета
                                      // последней, хранящейся в стеке, то кладем ее в стек
                                      // иначе, выталкиваем последнюю операцию,
                                      // а текущую сохраняем в стек
                                      // Если текущий символ - '(', кладем его в стек
                                      // Если текущий символ - ')', то выталкиваем из стека
                                      // все операции в результирующую строку, пока не встретим знак '('.
                                      // Его в строку не закидываем.
                                      // После проверки всей строки, выталкиваем из стека оставшиеся операции



            {
                if (input[i] == '(') //Если символ - открывающая скобка
                    operStack.Push(input[i]); //пуш :Записываем её в стек
                else if (input[i] == ')') //Если символ - закрывающая скобка
                {
                    //Выписываем все операторы до открывающей скобки в строку
                    char s = operStack.Pop(); //Pop: извлекает и возвращает первый элемент из стека

                    while (s != '(')
                    {
                        output += s.ToString() + ' ';
                        s = operStack.Pop();
                    }
                }
                else //Если любой другой оператор
                {
                    if (operStack.Count > 0) //Если в стеке есть элементы
                        if (GetPriority(input[i]) <= GetPriority(operStack.Peek())) //И если приоритет нашего оператора меньше или равен приоритету оператора на вершине стека
                            output += operStack.Pop().ToString() + " "; //То добавляем последний оператор из стека в строку с выражением

                    operStack.Push(char.Parse(input[i].ToString())); //Если стек пуст, или же приоритет оператора выше - добавляем операторов на вершину стека

                }
            }
        }

        //Когда прошли по всем символам, выкидываем из стека все оставшиеся там операторы в строку
        while (operStack.Count > 0)
            output += operStack.Pop() + " "; //Pop: извлекает и возвращает первый элемент из стека

        return output; //Возвращаем выражение в постфиксной записи
    }
    //Метод, вычисляющий значение выражения, уже преобразованного в постфиксную запись
    static public double Counting(string input)
    {
        double result = 0; //Результат
        Stack<double> temp = new Stack<double>(); // В стеке будут храниться цифры из ОПН

        for (int i = 0; i < input.Length; i++) //Для каждого символа в строке
        {
            //-----принцип------
            // Если символ - цифра, помещаем его в стек,
            // иначе (символ - операция), выполняем эту операцию
            // для двух последних значений, хранящихся в стеке.
            // Результат помещаем в стек

            // Возвращаем результат







            //Если символ - цифра, то читаем все число и записываем на вершину стека
            if (Char.IsDigit(input[i]))
            {
                string a = string.Empty;

                while (!IsDelimeter(input[i]) && !IsOperator(input[i])) //Пока не разделитель
                {
                    a += input[i]; //Добавляем
                    i++;
                    if (i == input.Length) break;
                }
                temp.Push(double.Parse(a)); //Записываем в стек
                i--;
            }
            else if (IsOperator(input[i])) //Если символ - оператор
            {
                //Берем два последних значения из стека
                double a = temp.Pop();
                double b = temp.Pop();

                switch (input[i]) //И производим над ними действие, согласно оператору
                {
                    case '+': result = b + a; break;
                    case '-': result = b - a; break;
                    case '*': result = b * a; break;
                    case '/': result = b / a; break;
                    case '^': result = double.Parse(Math.Pow(double.Parse(b.ToString()), double.Parse(a.ToString())).ToString()); break;
                }
                temp.Push(result); //Результат вычисления записываем обратно в стек
            }
        }
        return temp.Peek(); //Забираем результат всех вычислений из стека и возвращаем его
    }
    //Метод возвращает true, если проверяемый символ пробед или равно если нет то фолс
    static private bool IsDelimeter(char c) //char c к индексу ниже относится
    {
        if ((" =".IndexOf(c) != -1)) //индексОФ Возвращает индекс с отсчетом от нуля первого
                                     //вхождения указанного символа в строке
                                     // Если символа нет то -1 вернет соответственно 
            return true;
        return false;
    }
    //Метод возвращает true, если проверяемый символ оператор
    static private bool IsOperator(char с)
    {
        if (("+-/*^()".IndexOf(с) != -1)) 
            return true;
        return false;
    }
    //Метод возвращает приоритет оператора
    static private byte GetPriority(char s)
    {
        switch (s)
        {
            case '(': return 0;
            case ')': return 1;
            case '+': return 2;
            case '-': return 3;
            case '*': return 4;
            case '/': return 4;
            case '^': return 5;
            default: return 6;
        }
    }
   
}

class Program
{
    

    static void Main(string[] args)
    {
        
        while (true) //Бесконечный цикл
        {
           
            Console.Write("Введите выражение: "); //Предлагаем ввести выражение
            Console.WriteLine(RPN.Calculate(Console.ReadLine())); //Считываем, и выводим результат
          
        }
    }
}